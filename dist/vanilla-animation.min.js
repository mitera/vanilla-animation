/*!
 * @author Simone Miterangelis <simone@mite.it>
 * vanilla-animation v1.0.3 by @mitera
 * https://github.com/mitera/vanilla-animation
 * Released under the MIT License.
 */
(function(global,factory){typeof exports==="object"&&typeof module!=="undefined"?module.exports=factory():typeof define==="function"&&define.amd?define(factory):(global=typeof globalThis!=="undefined"?globalThis:global||self,global.VanillaAnimation=factory())})(this,(function(){"use strict";class VanillaAnimation{constructor(settings){this.offsetItems=[];let default_settings={boxClass:"vanimation",animatePrefix:"animate__",animateClass:"animate__animated",offset:0,mobile:true,live:true,scrollContainer:null,callback:null};this.settings=Object.assign(Object.assign({},default_settings),settings);let disabled=!this.settings.mobile&&this.isMobile(navigator.userAgent);this.container=document.body;if(this.settings.scrollContainer){const container=document.querySelector(this.settings.scrollContainer);if(container){this.container=container}}this.items=Array.from(this.container.querySelectorAll("."+this.settings.boxClass));if(!disabled){const update=this.resetItems.bind(this);if(document.readyState!=="loading"){this.resetItems()}else{document.addEventListener("DOMContentLoaded",update,{once:true})}if("IntersectionObserver"in window){let itemObserver=this.intertsectionObserve();this.items.forEach((function(item){itemObserver.observe(item)}))}if(this.settings.live){this.observeItemMutation()}this.initScrollEvent()}}initScrollEvent(){let $this=this;window.addEventListener("scroll",(function(){$this.offsetItems.forEach((function(item){let offset=item.dataset.vanimationOffset?parseInt(item.dataset.vanimationOffset):$this.settings.offset;if(item.dataset.vanimationScrolly){if(parseInt(item.dataset.vanimationScrolly)+offset<window.scrollY){item.removeAttribute("data-vanimation-scrolly");$this.doAnimation(item);const index=$this.offsetItems.indexOf(item);if(index>-1){$this.offsetItems.splice(index,1)}}}}))}))}resetItems(){let $this=this;this.items.forEach((function(item){$this.resetItem(item)}))}resetItem(item){item.style.visibility="hidden";let animationName=window.getComputedStyle(item).getPropertyValue("animation-name");if(animationName&&animationName!="none"){item.classList.remove(this.settings.animatePrefix+animationName);item.dataset.vanimation=this.settings.animatePrefix+animationName}}intertsectionObserve(){let $this=this;let itemObserver=new IntersectionObserver((function(entries){entries.forEach((function(entry){if(entry.isIntersecting){let item=entry.target;if(!item.classList.contains($this.settings.animateClass)){if(!$this.isVisible(item)){item.dataset.vanimationScrolly=window.scrollY+"";$this.offsetItems.push(item)}else{$this.doAnimation(item)}}}}))}));return itemObserver}doAnimation(item){let animationName=item.dataset.vanimation?item.dataset.vanimation:"none";item.classList.add(animationName);item.classList.add(this.settings.animateClass);item.style.visibility="visible";let duration=item.dataset.vanimationDuration?item.dataset.vanimationDuration:window.getComputedStyle(item).getPropertyValue("animation-duration");if(duration){item.style.setProperty("animation-duration",duration)}let delay=item.dataset.vanimationDelay?item.dataset.vanimationDelay:window.getComputedStyle(item).getPropertyValue("animation-delay");if(delay){item.style.setProperty("animation-delay",delay)}let iteration=item.dataset.vanimationIteration?item.dataset.vanimationIteration:window.getComputedStyle(item).getPropertyValue("animation-iteration-count");if(iteration){item.style.setProperty("animation-iteration-count",delay)}if(this.settings.callback){let intDuration=this.parseDuration(duration);let intDelay=this.parseDuration(duration);let totalDuration=intDuration+intDelay;setTimeout((()=>{this.settings.callback(item)}),totalDuration)}}parseDuration(duration){if(!duration)return 0;if(duration.indexOf("ms")>-1){return parseInt(duration.replace("ms",""))}let intDuration=parseInt(duration.replace("s",""));return intDuration}observeItemMutation(){let observer=new MutationObserver((mutations=>{for(let mutation of mutations){for(let node of mutation.addedNodes){if(!(node instanceof HTMLElement))continue;if(node.classList.contains(this.settings.boxClass)){this.resetItem(node);if("IntersectionObserver"in window){let itemObserver=this.intertsectionObserve();itemObserver.observe(node)}}}}}));observer.observe(this.container,{childList:true,subtree:true})}isMobile(agent){return/Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(agent)}isVisible(item){const offset=item.dataset.vanimationOffset?parseInt(item.dataset.vanimationOffset):this.settings.offset;const viewTop=this.container.scrollTop;const viewBottom=viewTop+Math.min(document.documentElement.clientHeight,window.innerHeight)-offset;const top=item.getBoundingClientRect().top;const bottom=top+item.clientHeight;let returnValue=top<=viewBottom&&bottom>=viewTop;if(top<0)returnValue=true;return returnValue}}return VanillaAnimation}));